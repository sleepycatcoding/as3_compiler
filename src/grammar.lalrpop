use std::str::FromStr;
use crate::ast;
use crate::lexer::{LexicalError, Token};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        "var" => Token::KeywordVar,
        "package" => Token::KeywordPackage,
        "class" => Token::KeywordClass,
        "visibility" => Token::KeywordVisibility(<ast::Visibility>),
        "identifier" => Token::Identifier(<String>),
        "int" => Token::Integer(<i32>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LCurlyBracket,
        "}" => Token::RCurlyBracket,
        "=" => Token::Assign,
        ";" => Token::Semicolon,
        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,
    }
}

pub Package: ast::Package = {
    "package" <name:"identifier"> "{" <classes:Class*> "}" => {
        ast::Package {
            name: Some(name),
            classes,
        }
    },
    "package" "{" <classes:Class*> "}" => {
        ast::Package {
            name: None,
            classes,
        }
    }
};

pub Class: ast::Class = {
    <vis:"visibility"> "class" <name:"identifier"> "{" "}" => {
        ast::Class {
            name,
            visibility: vis,
        }
    },
};

pub Statement: Box<ast::Statement> = {
    "var" <name:"identifier"> "=" <value:Expression> ";" => {
        Box::new(ast::Statement::Variable { name, value })
    },
};

pub Expression: Box<ast::Expression> = {
    #[precedence(level="1")]
    Term,

    #[precedence(level="2")] #[assoc(side="left")]
    <lhs:Expression> "*" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Mul,
            rhs,
        })
    },
    <lhs:Expression> "/" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Div,
            rhs
        })
    },

    #[precedence(level="3")] #[assoc(side="left")]
    <lhs:Expression> "+" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Add,
            rhs,
        })
    },
    <lhs:Expression> "-" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Sub,
            rhs,
        })
    },
};

pub Term: Box<ast::Expression> = {
    <val:"int"> => {
        Box::new(ast::Expression::Integer(val))
    },
    <name:"identifier"> => {
        Box::new(ast::Expression::Variable(name))
    },
    "(" <expr:Expression> ")" => expr,
};