use std::str::FromStr;
use crate::ast;
use crate::lexer::{LexicalError, Token};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        "var" => Token::KeywordVar,
        "identifier" => Token::Identifier(<String>),
        "int" => Token::Integer(<i32>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        "=" => Token::Assign,
        ";" => Token::Semicolon,
        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,
    }
}

pub Statement: Box<ast::Statement> = {
    "var" <name:"identifier"> "=" <value:Expression> ";" => {
        Box::new(ast::Statement::Variable { name, value })
    }
};

pub Expression: Box<ast::Expression> = {
    #[precedence(lvl="1")],
    Term,

    #[precedence(lvl="2")] #[assoc(side="left")]
    <lhs:Expression> "*" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Mul,
            rhs,
        })
    },
    <lhs:Expression> "/" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Div,
            rhs
        })
    },

    #[precedence(lvl="3")]
    <lhs:Expression> "+" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Add,
            rhs,
        })
    },
    <lhs:Expression> "-" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Sub,
            rhs,
        })
    },
};

pub Term: Box<ast::Expression> = {
    <val:"int"> => {
        Box::new(ast::Expression::Integer(val))
    },
    <name:"identifier"> => {
        Box::new(ast::Expression::Variable(name))
    },
    "(" Expression ")",
};