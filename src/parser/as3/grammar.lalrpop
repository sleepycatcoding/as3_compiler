use crate::{parser::{common::Type, as3::ClassPart}, ast};
use crate::lexer::{LexicalError, as3::Token};

grammar;

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        "var" => Token::KeywordVar,
        "package" => Token::KeywordPackage,
        "class" => Token::KeywordClass,
        "function" => Token::KeywordFunction,
        "visibility" => Token::KeywordVisibility(<ast::Visibility>),
        "identifier" => Token::Identifier(<String>),
        "int" => Token::Integer(<i32>),
        "string" => Token::String(<String>),
        "bool" => Token::Bool(<bool>),
        "(" => Token::LParen,
        ")" => Token::RParen,
        "{" => Token::LCurlyBracket,
        "}" => Token::RCurlyBracket,
        "=" => Token::Assign,
        "," => Token::Comma,
        ":" => Token::Colon,
        ";" => Token::Semicolon,
        "+" => Token::OperatorAdd,
        "-" => Token::OperatorSub,
        "*" => Token::OperatorMul,
        "/" => Token::OperatorDiv,
    }
}

pub Package: ast::Package = {
    "package" <name:"identifier"> "{" <classes:Class*> "}" => {
        ast::Package {
            name: Some(name),
            classes,
        }
    },
    "package" "{" <classes:Class*> "}" => {
        ast::Package {
            name: None,
            classes,
        }
    }
};

// Class parsing.
pub Class: ast::Class = {
    <vis:"visibility"> "class" <name:"identifier">
    "{"
    <parts:ClassPart*>
    "}" => {
        let mut functions = Vec::new();
        let mut members = Vec::new();

        for part in parts {
            match part {
                ClassPart::Function(v) => functions.push(v),
                ClassPart::Member(v) => members.push(v),
            }
        }

        ast::Class {
            name,
            visibility: vis,
            functions,
            members,
        }
    },
};

pub ClassPart: ClassPart = {
    <Function> => ClassPart::Function(<>),
    <Member> => ClassPart::Member(<>),
};
pub Member: ast::ClassMember = {
    // example: public var asdasd;
    <vis:"visibility"?> "var" <name:"identifier"> ";" => {
        ast::ClassMember {
            name,
            visibility: vis,
            // This is implicit, we should warn user with implicit any type, but if explicitly given then ignore.
            ty: Type::Any,
            init_expr: None,
        }
    },
    // example: public var value: String;
    <vis:"visibility"?> "var" <name:"identifier"> ":" <ty:"identifier"> ";" => {
        ast::ClassMember {
            name,
            visibility: vis,
            ty: ty.parse().unwrap(),
            init_expr: None,
        }
    },
    // example: public var value: String = "";
    <vis:"visibility"?> "var" <name:"identifier"> ":" <ty:"identifier"> "=" <init:Expression> ";" => {
        ast::ClassMember {
            name,
            visibility: vis,
            ty: ty.parse().unwrap(),
            init_expr: Some(init),
        }
    },
};


// Function parsing.
pub Function: ast::Function = {
    <vis:"visibility"> "function" <name:"identifier"> "(" <arguments:Arguments> ")" ":" <return_type:"identifier"> <block:CodeBlock> => {
        ast::Function {
            name,
            visibility: vis,
            arguments,
            return_type: return_type.parse().unwrap(),
            block,
        }
    }
};

pub Arguments = Comma<Argument>;
pub Argument: ast::Argument = {
    <name:"identifier"> ":" <value_type:"identifier"> => {
        ast::Argument {
            name,
            value_type: value_type.parse().unwrap(),
        }
    }
};

// Generic code parsing.
pub CodeBlock: Vec<Box<ast::Statement>> = {
    "{" <Statement*> "}" => <>
};
pub Statement: Box<ast::Statement> = {
    "var" <name:"identifier"> "=" <value:Expression> ";" => {
        Box::new(ast::Statement::Variable { name, var_type: Type::Any, value })
    },
};

// Expression parsing.
pub Expression: Box<ast::Expression> = {
    #[precedence(level="1")]
    Term,

    #[precedence(level="2")] #[assoc(side="left")]
    <lhs:Expression> "*" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Mul,
            rhs,
        })
    },
    <lhs:Expression> "/" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Div,
            rhs
        })
    },

    #[precedence(level="3")] #[assoc(side="left")]
    <lhs:Expression> "+" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Add,
            rhs,
        })
    },
    <lhs:Expression> "-" <rhs:Expression> => {
        Box::new(ast::Expression::BinaryOperation {
            lhs,
            operator: ast::Operator::Sub,
            rhs,
        })
    },
};
pub Term: Box<ast::Expression> = {
    <val:"int"> => {
        Box::new(ast::Expression::Integer(val))
    },
    <val:"string"> => {
        Box::new(ast::Expression::String(val))
    },
    <val:"bool"> => {
        Box::new(ast::Expression::Bool(val))
    },
    <name:"identifier"> => {
        Box::new(ast::Expression::Variable(name))
    },
    "(" <Expression> ")",
};

// Utilities
Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};
